/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createVotesFromDiscriminatorValue, serializeVotes, type Votes } from '../models/index';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /votes
 */
export interface VotesRequestBuilder extends BaseRequestBuilder<VotesRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<VotesRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Votes[]>}
     */
     get(requestConfiguration?: RequestConfiguration<VotesRequestBuilderGetQueryParameters> | undefined) : Promise<Votes[] | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     patch(body: Votes, requestConfiguration?: RequestConfiguration<VotesRequestBuilderPatchQueryParameters> | undefined) : Promise<void>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     post(body: Votes, requestConfiguration?: RequestConfiguration<VotesRequestBuilderPostQueryParameters> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<VotesRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<VotesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Votes, requestConfiguration?: RequestConfiguration<VotesRequestBuilderPatchQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Votes, requestConfiguration?: RequestConfiguration<VotesRequestBuilderPostQueryParameters> | undefined) : RequestInformation;
}
export interface VotesRequestBuilderDeleteQueryParameters {
    createdAt?: string;
    id?: string;
    playerA?: string;
    playerB?: string;
    voterId?: string;
    winnerId?: string;
}
export interface VotesRequestBuilderGetQueryParameters {
    createdAt?: string;
    id?: string;
    /**
     * Limiting and Pagination
     */
    limit?: string;
    /**
     * Limiting and Pagination
     */
    offset?: string;
    /**
     * Ordering
     */
    order?: string;
    playerA?: string;
    playerB?: string;
    /**
     * Filtering Columns
     */
    select?: string;
    voterId?: string;
    winnerId?: string;
}
export interface VotesRequestBuilderPatchQueryParameters {
    createdAt?: string;
    id?: string;
    playerA?: string;
    playerB?: string;
    voterId?: string;
    winnerId?: string;
}
export interface VotesRequestBuilderPostQueryParameters {
    /**
     * Filtering Columns
     */
    select?: string;
}
/**
 * Uri template for the request builder.
 */
export const VotesRequestBuilderUriTemplate = "{+baseurl}/votes{?createdAt*,id*,limit*,offset*,order*,playerA*,playerB*,select*,voterId*,winnerId*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const VotesRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: VotesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/vnd.pgrst.object+json;nulls=stripped, application/vnd.pgrst.object+json, text/csv",
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: VotesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/vnd.pgrst.object+json, application/vnd.pgrst.object+json;nulls=stripped",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createVotesFromDiscriminatorValue,
    },
    patch: {
        uriTemplate: VotesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/vnd.pgrst.object+json;nulls=stripped, application/vnd.pgrst.object+json, text/csv",
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/vnd.pgrst.object+json;nulls=stripped",
        requestBodySerializer: serializeVotes,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    post: {
        uriTemplate: VotesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/vnd.pgrst.object+json;nulls=stripped, application/vnd.pgrst.object+json, text/csv",
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/vnd.pgrst.object+json;nulls=stripped",
        requestBodySerializer: serializeVotes,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
